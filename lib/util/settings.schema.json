{
  "type": "object",
  "properties": {
    "device_options": {
      "type": "object"
    },
    "homeassistant": {
      "title": "Homeassistant integration",
      "type": "boolean",
      "description": "Home Assistant integration (MQTT discovery)",
      "default": false
    },
    "permit_join": {
      "type": "boolean",
      "default": false,
      "title": "Permit join",
      "description": "Allow new devices to join. WARNING: Disable this after all devices have been paired!"
    },
    "external_converters": {
      "type": "array",
      "title": "External converters",
      "items": {
        "type": "string"
      },
      "examples": ["DIYRuZ_FreePad.js"]
    },
    "mqtt": {
      "type": "object",
      "title": "MQTT settings",
      "properties": {
        "base_topic": {
          "type": "string",
          "title": "Base topic",
          "description": "MQTT base topic for Zigbee2MQTT MQTT messages",
          "examples": ["zigbee2mqtt"]
        },
        "server": {
          "type": "string",
          "title": "MQTT server",
          "description": "MQTT server URL (use mqtts:// for SSL/TLS connection)",
          "examples": ["mqtt://localhost:1883"]
        },
        "keepalive": {
          "type": "number",
          "title": "Keepalive",
          "description": "MQTT keepalive in second",
          "default": 60
        },
        "ca": {
          "type": "string",
          "title": "Certificate authority",
          "description": "Absolute path to SSL/TLS certificate of CA used to sign server and client certificates",
          "examples": ["/etc/ssl/mqtt-ca.crt"]
        },
        "key": {
          "type": "string",
          "title": "SSL/TLS key",
          "description": "Absolute paths to SSL/TLS key and certificate for client-authentication",
          "examples": ["/etc/ssl/mqtt-client.key"]

        },
        "cert": {
          "type": "string",
          "title": "SSL/TLS certificate",
          "examples": ["/etc/ssl/mqtt-client.crt"]
        },
        "user": {
          "type": "string",
          "title": "User",
          "description": "MQTT server authentication user",
          "examples": ["johnnysilverhand"]
        },
        "password": {
          "type": "string",
          "title": "Password",
          "description": "MQTT server authentication password",
          "examples": ["ILOVEPELMENI"]
        },
        "client_id": {
          "type": "string",
          "title": "Client ID",
          "description": "MQTT client ID",
          "examples": ["MY_CLIENT_ID"]
        },
        "reject_unauthorized": {
          "type": "boolean",
          "title": "Reject unauthorized",
          "description": "Disable self-signed SSL certificate",
          "default": true
        },
        "include_device_information": {
          "type": "boolean",
          "title": "Include device information",
          "description": "Include device information to mqtt messages",
          "default": false
        },
        "version": {
          "type": ["number", "null"],
          "title": "Version",
          "description": "MQTT protocol version",
          "default": 4
        },
        "force_disable_retain": {
          "type": "boolean",
          "title": "Force disable retain",
          "description": "Disable retain for all send messages. ONLY enable if you MQTT broker doesn't support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform). Enabling will break the Home Assistant integration",
          "default": false
        }
      },
      "required": ["base_topic", "server"]
    },
    "serial": {
      "type": "object",
      "title": "Serial settings",
      "properties": {
        "port": {
          "type": ["string", "null"],
          "title": "Port",
          "description": "Location of the adapter. To autodetect the port, set null",
          "examples": ["/dev/ttyACM0"]
        },
        "disable_led": {
          "type": "boolean",
          "title": "Disable led",
          "description": "Disable LED of the adapter if supported",
          "default": false
        },
        "adapter": {
          "type": "string",
          "enum": ["deconz", "zstack", "zigate"],
          "title": "Adapter",
          "description": "Adapter type, not needed unless you are experiencing problems"
        }
      }
    },
    "blocklist": {
      "title": "Blocklist",
      "description": "Block devices from the network (by ieeeAddr)",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "passlist": {
      "title": "Passlist",
      "description": "Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "whitelist": {
      "type": "array",
      "title": "Whitelist (deprecated)",
      "items": {
        "type": "string"
      }
    },
    "ban": {
      "type": "array",
      "title": "Ban (deprecated)",
      "items": {
        "type": "string"
      }
    },
    "experimental": {
      "type": "object",
      "title": "Experimental options",
      "properties": {
        "transmit_power": {
          "type": ["number", "null"],
          "title": "Transmit power"
        },
        "output": {
          "type": "string",
          "enum": ["attribute_and_json", "attribute", "json"],
          "title": "MQTT output type",
          "description": "Examples when 'state' of a device is published json: topic: 'zigbee2mqtt/my_bulb' payload '{\"state\": \"ON\"}' attribute: topic 'zigbee2mqtt/my_bulb/state' payload 'ON' attribute_and_json: both json and attribute (see above)"
        }
      }
    },
    "advanced": {
      "type": "object",
      "title": "Advanced settings",
      "properties": {
        "legacy_api": {
          "type": "boolean",
          "title": "Legacy API",
          "description": "Disables the legacy api (false = disable)",
          "default": true
        },
        "pan_id": {
          "oneOf": [{
              "type": "string",
              "title": "Pan ID (string)"
            },
            {
              "type": "number",
              "title": "Pan ID (number)"
            }
          ],
          "title": "Pan ID",
          "description": "ZigBee pan ID"
        },
        "ext_pan_id": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "title": "Ext Pan ID",
          "description": "Zigbee extended pan ID"
        },
        "channel": {
          "type": "number",
          "minimum": 11,
          "maximum": 26,
          "default": 11,
          "title": "ZigBee channel",
          "description": "Changing requires re-pairing of all devices. (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid Problems)"
        },
        "cache_state": {
          "type": "boolean",
          "title": "Cache state",
          "description": "MQTT message payload will contain all attributes, not only changed ones. Has to be true when integrating via Home Assistant",
          "default": true
        },
        "cache_state_persistent": {
          "type": "boolean",
          "title": "Chache state persistent",
          "description": "Persist cached state, only used when Cache state(cache_state: true)",
          "default": true
        },
        "cache_state_send_on_startup": {
          "type": "boolean",
          "title": "Cache state send on startup",
          "description": "Cache state send on startup, only used when Cache state(cache_state: true)",
          "default": true
        },
        "log_rotation": {
          "type": "boolean",
          "title": "Log rotation",
          "description": "Log rotation",
          "default": true
        },
        "log_level": {
          "type": "string",
          "enum": ["info", "warn", "error", "debug"],
          "title": "Log level",
          "description": "Logging level",
          "default": "info"
        },
        "log_output": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["console", "file", "syslog"]
          },
          "title": "Log output",
          "description": "Output location of the log, leave empty to supress logging"
        },
        "log_directory": {
          "type": "string",
          "title": "Log directory",
          "description": "Location of log directory",
          "examples": ["data/log/%TIMESTAMP%"]
        },
        "log_file": {
          "type": "string",
          "title": "Log file",
          "description": "Log file name, can also contain timestamp",
          "examples": ["zigbee2mqtt_%TIMESTAMP%.log"],
          "default": "log.txt"
        },
        "baudrate": {
          "type": "number",
          "title": "Baudrate",
          "description": "Baudrate for serial port, default: 115200 for Z-Stack, 38400 for Deconz",
          "examples": [38400, 115200]
        },
        "rtscts": {
          "type": "boolean",
          "title": "RTS / CTS",
          "description": "RTS / CTS Hardware Flow Control for serial port",
          "default": false
        },
        "soft_reset_timeout": {
          "type": "number",
          "minimum": 0,
          "title": "Soft reset timeout (deprecated)",
          "description": "Soft reset ZNP after timeout",
          "readOnly": true
        },
        "network_key": {
          "oneOf": [{
              "type": "string",
              "title": "Network key(string)"
            },
            {
              "type": "array",
              "items": {
                "type": "number"
              },
              "title": "Network key(array)"
            }
          ],
          "title": "Network key",
          "description": "Network encryption key, will improve security (Note: changing requires repairing of all devices)"
        },
        "last_seen": {
          "type": "string",
          "enum": ["disable", "ISO_8601", "ISO_8601_local", "epoch"],
          "title": "Last seen",
          "description": "Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message",
          "default": "disable"
        },
        "elapsed": {
          "type": "boolean",
          "title": "Elapsed",
          "description": "Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg",
          "default": false
        },
        "availability_timeout": {
          "type": "number",
          "minimum": 0,
          "default": 0,
          "title": "Availability Timeout",
          "description": "Availability timeout in seconds When enabled, devices will be checked if they are still online. Only AC powered routers are checked for availability"
        },
        "availability_blocklist": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Availability Blocklist",
          "description": "Prevent devices from being checked for availability"
        },
        "availability_passlist": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Availability passlist",
          "description": "Only enable availability check for certain devices"
        },
        "availability_blacklist": {
          "type": "array",
          "title": "Availability blacklist (deprecated)",
          "items": {
            "type": "string"
          }
        },
        "availability_whitelist": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Availability whitelist (deprecated)"
        },
        "report": {
          "type": "boolean",
          "title": "Reporting",
          "description": "Enables report feature"
        },
        "homeassistant_discovery_topic": {
          "type": "string",
          "title": "Homeassistant discovery topic",
          "examples": ["homeassistant"]
        },
        "homeassistant_status_topic": {
          "type": "string",
          "title": "Home Assistant status topic",
          "examples": ["homeassistant/status"]
        },
        "timestamp_format": {
          "type": "string",
          "title": "Timestamp format",
          "description": "Log timestamp format",
          "examples": ["YYYY-MM-DD HH:mm:ss"]
        },
        "adapter_concurrent": {
          "title": "Adapter concurrency",
          "type": ["number", "null"],
          "description": "Adapter concurrency (e.g. 2 for CC2531 or 16 for CC26X2R1) (default: null, uses recommended value)"
        },
        "adapter_delay": {
          "type": ["number", "null"],
          "title": "Adapter delay"
        }
      }
    },
    "map_options": {
      "type": "object",
      "title": "Networkmap options",
      "properties": {
        "graphviz": {
          "type": "object",
          "properties": {
            "colors": {
              "type": "object",
              "properties": {
                "fill": {
                  "type": "object",
                  "properties": {
                    "enddevice": {
                      "type": "string"
                    },
                    "coordinator": {
                      "type": "string"
                    },
                    "router": {
                      "type": "string"
                    }
                  }
                },
                "font": {
                  "type": "object",
                  "properties": {
                    "enddevice": {
                      "type": "string"
                    },
                    "coordinator": {
                      "type": "string"
                    },
                    "router": {
                      "type": "string"
                    }
                  }
                },
                "line": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "string"
                    },
                    "inactive": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "devices": {
      "type": "object",
      "propertyNames": {
        "pattern": "^0x[\\d\\w]{16}$"
      },
      "patternProperties": {
        "^.*$": {
          "$ref": "#/definitions/device"
        }
      }
    },
    "groups": {
      "type": "object",
      "propertyNames": {
        "pattern": "^[\\w].*$"
      },
      "patternProperties": {
        "^.*$": {
          "$ref": "#/definitions/group"
        }
      }
    }
  },
  "required": ["mqtt"],
  "definitions": {
    "device": {
      "type": "object",
      "properties": {
        "friendly_name": {
          "type": "string",
          "title": "Friendly name",
          "description": "Used in the MQTT topic of a device. By default this is the device ID",
          "readOnly": true
        },
        "retain": {
          "type": "boolean",
          "title": "Retain",
          "description": "Retain MQTT messages of this device"
        },
        "retention": {
          "type": "number",
          "title": "Retention",
          "description": "Sets the MQTT Message Expiry in seconds, Make sure to set mqtt.version to 5"
        },
        "qos": {
          "type": "number",
          "title": "QoS",
          "descritption": "QoS level for MQTT messages of this device"
        },
        "debounce": {
          "type": "number",
          "title": "Debounce",
          "description": "Debounces messages of this device"
        },
        "debounce_ignore": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": ["action"],
          "title": "Ignore debounce",
          "description": "Protects unique payload values of specified payload properties from overriding within debounce time"
        },
        "retrieve_state": {
          "type": "boolean",
          "title": "Retrieve State",
          "description": "Retrieves the state after setting it (Should only be enabled when the reporting feature does not work for this device)"
        },
        "optimistic": {
          "type": "boolean",
          "title": "Optimistic",
          "description": "Publish optimistic state after set (default true)"
        },
        "filtered_attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": ["temperature", "battery", "action"],
          "title": "Filtered attributes",
          "description": "Allows to prevent certain attributes from being published"
        }
      },
      "required": ["friendly_name"]
    },
    "group": {
      "type": "object",
      "properties": {
        "friendly_name": {
          "type": "string"
        },
        "retain": {
          "type": "boolean"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "optimistic": {
          "type": "boolean"
        },
        "qos": {
          "type": "number"
        },
        "filtered_attributes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["friendly_name"]
    }
  }
}
